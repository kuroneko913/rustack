--------------------------------
eval: Sym("x") Stack: [] 

--------------------------------
Code: /x

Stack: []
 -> [Sym("x")]

--------------------------------
eval: Num(10) Stack: [Sym("x")] 

--------------------------------
Code: 10

Stack: [Sym("x")]
 -> [Sym("x"), Num(10)]

--------------------------------
eval: Op("def") Stack: [Sym("x"), Num(10)] 

--------------------------------
eval: Num(10) Stack: [Sym("x")] 

--------------------------------
Code: def

Stack: [Sym("x"), Num(10)]
 -> []

Vars Added: {"x": Num(10)}

--------------------------------
eval: Sym("y") Stack: [] 

x: Num(10)
--------------------------------
Code: /y

Stack: []
 -> [Sym("y")]

--------------------------------
eval: Num(20) Stack: [Sym("y")] 

x: Num(10)
--------------------------------
Code: 20

Stack: [Sym("y")]
 -> [Sym("y"), Num(20)]

--------------------------------
eval: Op("def") Stack: [Sym("y"), Num(20)] 

x: Num(10)
--------------------------------
eval: Num(20) Stack: [Sym("y")] 

x: Num(10)
--------------------------------
Code: def

Stack: [Sym("y"), Num(20)]
 -> []

Vars Added: {"y": Num(20)}

--------------------------------
Code: {

Blocks: [] 
-> [[]]

--------------------------------
eval: Op("x") Stack: [] 

x: Num(10)
y: Num(20)
--------------------------------
Code: x

Blocks: [[]] 
-> [[Op("x")]]

--------------------------------
eval: Op("y") Stack: [] 

x: Num(10)
y: Num(20)
--------------------------------
Code: y

Blocks: [[Op("x")]] 
-> [[Op("x"), Op("y")]]

--------------------------------
eval: Op("<") Stack: [] 

x: Num(10)
y: Num(20)
--------------------------------
Code: <

Blocks: [[Op("x"), Op("y")]] 
-> [[Op("x"), Op("y"), Op("<")]]

--------------------------------
eval: Block([Op("x"), Op("y"), Op("<")]) Stack: [] 

x: Num(10)
y: Num(20)
--------------------------------
Code: }

Stack: []
 -> [Block([Op("x"), Op("y"), Op("<")])]

Blocks: [[Op("x"), Op("y"), Op("<")]] 
-> []

--------------------------------
Code: {

Blocks: [] 
-> [[]]

--------------------------------
eval: Op("x") Stack: [Block([Op("x"), Op("y"), Op("<")])] 

x: Num(10)
y: Num(20)
--------------------------------
Code: x

Blocks: [[]] 
-> [[Op("x")]]

--------------------------------
eval: Block([Op("x")]) Stack: [Block([Op("x"), Op("y"), Op("<")])] 

x: Num(10)
y: Num(20)
--------------------------------
Code: }

Stack: [Block([Op("x"), Op("y"), Op("<")])]
 -> [Block([Op("x"), Op("y"), Op("<")]), Block([Op("x")])]

Blocks: [[Op("x")]] 
-> []

--------------------------------
Code: {

Blocks: [] 
-> [[]]

--------------------------------
eval: Op("y") Stack: [Block([Op("x"), Op("y"), Op("<")]), Block([Op("x")])] 

x: Num(10)
y: Num(20)
--------------------------------
Code: y

Blocks: [[]] 
-> [[Op("y")]]

--------------------------------
eval: Block([Op("y")]) Stack: [Block([Op("x"), Op("y"), Op("<")]), Block([Op("x")])] 

x: Num(10)
y: Num(20)
--------------------------------
Code: }

Stack: [Block([Op("x"), Op("y"), Op("<")]), Block([Op("x")])]
 -> [Block([Op("x"), Op("y"), Op("<")]), Block([Op("x")]), Block([Op("y")])]

Blocks: [[Op("y")]] 
-> []

--------------------------------
eval: Op("if") Stack: [Block([Op("x"), Op("y"), Op("<")]), Block([Op("x")]), Block([Op("y")])] 

x: Num(10)
y: Num(20)
--------------------------------
eval: Op("x") Stack: [] // op_ifが呼ばれて条件式、true時の評価式、false時の評価式のブロックがpopされている

x: Num(10)
y: Num(20)
--------------------------------
eval: Op("y") Stack: [Num(10)] 

x: Num(10)
y: Num(20)
--------------------------------
eval: Op("<") Stack: [Num(10), Num(20)]

x: Num(10)
y: Num(20)
--------------------------------
eval: Op("x") Stack: [] // 評価結果の値が入っていたが取り出されて、true時かfalse時のブロックを評価している

x: Num(10)
y: Num(20)
--------------------------------
Code: if

Stack: [Block([Op("x"), Op("y"), Op("<")]), Block([Op("x")]), Block([Op("y")])]
 -> [Num(10)]

--------------------------------
eval: Op("puts") Stack: [Num(10)] 

x: Num(10)
y: Num(20)
10
--------------------------------
Code: puts

Stack: [Num(10)]
 -> []

